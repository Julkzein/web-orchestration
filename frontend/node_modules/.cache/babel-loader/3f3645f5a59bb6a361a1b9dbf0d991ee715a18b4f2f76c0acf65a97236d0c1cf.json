{"ast":null,"code":"// frontend/src/services/api.ts\nimport axios from 'axios';\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 5000\n});\nexport const api = {\n  healthCheck: async () => {\n    try {\n      const response = await apiClient.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  },\n  getActivities: async () => {\n    const response = await apiClient.get('/activities');\n    return response.data;\n  },\n  createOrchestration: async data => {\n    const response = await apiClient.post('/orchestration/create', data);\n    return response.data;\n  },\n  validateOrchestration: async data => {\n    const response = await apiClient.post('/orchestration/validate', data);\n    return response.data;\n  },\n  exportOrchestration: async () => {\n    const response = await apiClient.get('/orchestration/export');\n    return response.data;\n  },\n  getRecommendation: async (gapIndex = 0) => {\n    const response = await apiClient.post('/orchestration/recommend', {\n      gapIndex\n    });\n    return response.data;\n  },\n  saveOrchestration: async filename => {\n    const response = await apiClient.post('/orchestration/save', {\n      filename\n    });\n    return response.data;\n  },\n  loadOrchestration: async filename => {\n    const response = await apiClient.post('/orchestration/load', {\n      filename\n    });\n    return response.data;\n  },\n  printOrchestration: async () => {\n    const response = await apiClient.get('/orchestration/print');\n    return response.data;\n  },\n  // New methods for gap-based recommendations\n  getOrchestrationState: async () => {\n    const response = await apiClient.get('/orchestration/state');\n    return response.data;\n  },\n  setGapFocus: async gapIndex => {\n    const response = await apiClient.post('/orchestration/set-gap-focus', {\n      gapIndex\n    });\n    return response.data;\n  },\n  autoAddFromGap: async () => {\n    const response = await apiClient.post('/orchestration/auto-add-from-gap', {});\n    return response.data;\n  },\n  evaluateGaps: async () => {\n    const response = await apiClient.post('/orchestration/evaluate-gaps', {});\n    return response.data;\n  },\n  autoAdd: async () => {\n    const response = await apiClient.post('/orchestration/auto-add', {});\n    return response.data;\n  },\n  getActivitiesForGap: async gapIndex => {\n    const response = await apiClient.post('/orchestration/activities-for-gap', {\n      gapIndex\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","timeout","api","healthCheck","response","get","data","error","console","getActivities","createOrchestration","post","validateOrchestration","exportOrchestration","getRecommendation","gapIndex","saveOrchestration","filename","loadOrchestration","printOrchestration","getOrchestrationState","setGapFocus","autoAddFromGap","evaluateGaps","autoAdd","getActivitiesForGap"],"sources":["/Users/jules/Desktop/orchestration-graph-web/frontend/src/services/api.ts"],"sourcesContent":["// frontend/src/services/api.ts\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 5000,\n});\n\nexport const api = {\n  healthCheck: async () => {\n    try {\n      const response = await apiClient.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  },\n  \n  getActivities: async () => {\n    const response = await apiClient.get('/activities');\n    return response.data;\n  },\n  \n  createOrchestration: async (data: any) => {\n    const response = await apiClient.post('/orchestration/create', data);\n    return response.data;\n  },\n  \n  validateOrchestration: async (data: any) => {\n    const response = await apiClient.post('/orchestration/validate', data);\n    return response.data;\n  },\n  \n  exportOrchestration: async () => {\n    const response = await apiClient.get('/orchestration/export');\n    return response.data;\n  },\n  \n  getRecommendation: async (gapIndex: number = 0) => {\n    const response = await apiClient.post('/orchestration/recommend', { gapIndex });\n    return response.data;\n  },\n  \n  saveOrchestration: async (filename: string) => {\n    const response = await apiClient.post('/orchestration/save', { filename });\n    return response.data;\n  },\n  \n  loadOrchestration: async (filename: string) => {\n    const response = await apiClient.post('/orchestration/load', { filename });\n    return response.data;\n  },\n  \n  printOrchestration: async () => {\n    const response = await apiClient.get('/orchestration/print');\n    return response.data;\n  },\n  \n  // New methods for gap-based recommendations\n  getOrchestrationState: async () => {\n    const response = await apiClient.get('/orchestration/state');\n    return response.data;\n  },\n  \n  setGapFocus: async (gapIndex: number) => {\n    const response = await apiClient.post('/orchestration/set-gap-focus', { gapIndex });\n    return response.data;\n  },\n  \n  autoAddFromGap: async () => {\n    const response = await apiClient.post('/orchestration/auto-add-from-gap', {});\n    return response.data;\n  },\n  \n  evaluateGaps: async () => {\n    const response = await apiClient.post('/orchestration/evaluate-gaps', {});\n    return response.data;\n  },\n  \n  autoAdd: async () => {\n    const response = await apiClient.post('/orchestration/auto-add', {});\n    return response.data;\n  },\n  \n  getActivitiesForGap: async (gapIndex: number) => {\n    const response = await apiClient.post('/orchestration/activities-for-gap', { gapIndex });\n    return response.data;\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}