{"ast":null,"code":"var _jsxFileName = \"/Users/jules/Desktop/orchestration-graph-web/frontend/src/components/GraphCanvas.tsx\",\n  _s = $RefreshSig$();\n// frontend/src/components/GraphCanvas.tsx\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, MiniMap, useNodesState, useEdgesState } from 'react-flow-renderer';\nimport { useDrop } from 'react-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphCanvas = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [nextNodeId, setNextNodeId] = useState(1);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const [{\n    isOver\n  }, drop] = useDrop(() => ({\n    accept: 'activity',\n    drop: (item, monitor) => {\n      const offset = monitor.getClientOffset();\n      if (offset) {\n        addNode(item, offset);\n      }\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  }));\n  const addNode = (activity, position) => {\n    const newNode = {\n      id: `node-${nextNodeId}`,\n      type: 'default',\n      position: position,\n      data: {\n        label: activity.name,\n        ...activity\n      },\n      style: {\n        background: activity.color,\n        color: '#fff',\n        border: '1px solid #222',\n        width: 180\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n    setNextNodeId(nextNodeId + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-canvas\",\n    ref: drop,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Orchestration Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '500px',\n        border: '1px solid #ccc'\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphCanvas, \"7p2pSrNLuGGjcqAMo6im9vogvSo=\", false, function () {\n  return [useNodesState, useEdgesState, useDrop];\n});\n_c = GraphCanvas;\nexport default GraphCanvas;\nvar _c;\n$RefreshReg$(_c, \"GraphCanvas\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","Background","Controls","MiniMap","useNodesState","useEdgesState","useDrop","jsxDEV","_jsxDEV","GraphCanvas","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nextNodeId","setNextNodeId","onConnect","params","eds","isOver","drop","accept","item","monitor","offset","getClientOffset","addNode","collect","activity","position","newNode","id","type","data","label","name","style","background","color","border","width","nds","concat","className","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","height","fitView","_c","$RefreshReg$"],"sources":["/Users/jules/Desktop/orchestration-graph-web/frontend/src/components/GraphCanvas.tsx"],"sourcesContent":["// frontend/src/components/GraphCanvas.tsx\nimport React, { useCallback, useState } from 'react';\nimport ReactFlow, {\n  Node,\n  Edge,\n  addEdge,\n  Background,\n  Controls,\n  MiniMap,\n  useNodesState,\n  useEdgesState,\n  Connection,\n} from 'react-flow-renderer';\nimport { useDrop } from 'react-dnd';\nimport { Activity } from '../types';\n\nconst GraphCanvas: React.FC = () => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [nextNodeId, setNextNodeId] = useState(1);\n\n  const onConnect = useCallback(\n    (params: Connection) => setEdges((eds) => addEdge(params, eds)),\n    [setEdges]\n  );\n\n  const [{ isOver }, drop] = useDrop(() => ({\n    accept: 'activity',\n    drop: (item: Activity, monitor) => {\n      const offset = monitor.getClientOffset();\n      if (offset) {\n        addNode(item, offset);\n      }\n    },\n    collect: (monitor) => ({\n      isOver: !!monitor.isOver(),\n    }),\n  }));\n\n  const addNode = (activity: Activity, position: { x: number; y: number }) => {\n    const newNode: Node = {\n      id: `node-${nextNodeId}`,\n      type: 'default',\n      position: position,\n      data: { \n        label: activity.name,\n        ...activity \n      },\n      style: {\n        background: activity.color,\n        color: '#fff',\n        border: '1px solid #222',\n        width: 180,\n      },\n    };\n\n    setNodes((nds) => nds.concat(newNode));\n    setNextNodeId(nextNodeId + 1);\n  };\n\n  return (\n    <div className=\"graph-canvas\" ref={drop}>\n      <h2>Orchestration Graph</h2>\n      <div style={{ height: '500px', border: '1px solid #ccc' }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          fitView\n        >\n          <Background />\n          <Controls />\n          <MiniMap />\n        </ReactFlow>\n      </div>\n    </div>\n  );\n};\n\nexport default GraphCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}