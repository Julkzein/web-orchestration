{"ast":null,"code":"// frontend/src/services/api.ts\nimport axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create axios instance with base configuration\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const api = {\n  // Test connection\n  healthCheck: async () => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  },\n  // Get all activities from CSV\n  getActivities: async () => {\n    const response = await apiClient.get('/activities');\n    return response.data;\n  },\n  // Create new orchestration graph\n  createOrchestration: async data => {\n    const response = await apiClient.post('/orchestration/create', data);\n    return response.data;\n  },\n  // Validate orchestration\n  validateOrchestration: async data => {\n    const response = await apiClient.post('/orchestration/validate', data);\n    return response.data;\n  },\n  // Export orchestration\n  exportOrchestration: async () => {\n    const response = await apiClient.get('/orchestration/export');\n    return response.data;\n  },\n  getRecommendation: async (gapIndex = 0) => {\n    const response = await apiClient.post('/orchestration/recommend', {\n      gapIndex\n    });\n    return response.data;\n  },\n  // Save orchestration\n  saveOrchestration: async filename => {\n    const response = await apiClient.post('/orchestration/save', {\n      filename\n    });\n    return response.data;\n  },\n  // Load orchestration\n  loadOrchestration: async filename => {\n    const response = await apiClient.post('/orchestration/load', {\n      filename\n    });\n    return response.data;\n  },\n  // Print orchestration\n  printOrchestration: async () => {\n    const response = await apiClient.get('/orchestration/print');\n    return response.data;\n  },\n  evaluateGaps: async () => {\n    const response = await apiClient.post('/orchestration/evaluate-gaps', {});\n    return response.data;\n  },\n  autoAdd: async () => {\n    const response = await apiClient.post('/orchestration/auto-add', {});\n    return response.data;\n  },\n  getActivitiesForGap: async gapIndex => {\n    const response = await apiClient.post('/orchestration/activities-for-gap', {\n      gapIndex\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","api","healthCheck","response","get","data","getActivities","createOrchestration","post","validateOrchestration","exportOrchestration","getRecommendation","gapIndex","saveOrchestration","filename","loadOrchestration","printOrchestration","evaluateGaps","autoAdd","getActivitiesForGap"],"sources":["/Users/jules/Desktop/orchestration-graph-web/frontend/src/services/api.ts"],"sourcesContent":["// frontend/src/services/api.ts\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create axios instance with base configuration\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const api = {\n  // Test connection\n  healthCheck: async () => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  },\n\n  // Get all activities from CSV\n  getActivities: async () => {\n    const response = await apiClient.get('/activities');\n    return response.data;\n  },\n\n  // Create new orchestration graph\n  createOrchestration: async (data: any) => {\n    const response = await apiClient.post('/orchestration/create', data);\n    return response.data;\n  },\n\n  // Validate orchestration\n  validateOrchestration: async (data: any) => {\n    const response = await apiClient.post('/orchestration/validate', data);\n    return response.data;\n  },\n\n  // Export orchestration\n  exportOrchestration: async () => {\n    const response = await apiClient.get('/orchestration/export');\n    return response.data;\n  },\n\n  getRecommendation: async (gapIndex: number = 0) => {\n    const response = await apiClient.post('/orchestration/recommend', { gapIndex });\n    return response.data;\n  },\n  \n  // Save orchestration\n  saveOrchestration: async (filename: string) => {\n    const response = await apiClient.post('/orchestration/save', { filename });\n    return response.data;\n  },\n  \n  // Load orchestration\n  loadOrchestration: async (filename: string) => {\n    const response = await apiClient.post('/orchestration/load', { filename });\n    return response.data;\n  },\n  \n  // Print orchestration\n  printOrchestration: async () => {\n    const response = await apiClient.get('/orchestration/print');\n    return response.data;\n  },\n\n  evaluateGaps: async () => {\n    const response = await apiClient.post('/orchestration/evaluate-gaps', {});\n    return response.data;\n  },\n  \n  autoAdd: async () => {\n    const response = await apiClient.post('/orchestration/auto-add', {});\n    return response.data;\n  },\n  \n  getActivitiesForGap: async (gapIndex: number) => {\n    const response = await apiClient.post('/orchestration/activities-for-gap', { gapIndex });\n    return response.data;\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}