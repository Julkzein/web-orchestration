{"ast":null,"code":"var _jsxFileName = \"/Users/jules/Desktop/orchestration-graph-web/frontend/src/components/GraphCanvas.tsx\",\n  _s = $RefreshSig$();\n// frontend/src/components/GraphCanvas.tsx\nimport React, { useCallback, useState, useRef, useEffect } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, useNodesState, useEdgesState, Controls, Background, MiniMap } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { useDrop } from 'react-dnd';\n\n// Define custom node data type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphCanvasInner = ({\n  onTimeUpdate\n}) => {\n  _s();\n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [nextNodeId, setNextNodeId] = useState(1);\n\n  // Calculate total time when nodes change\n  useEffect(() => {\n    if (onTimeUpdate) {\n      const totalTime = nodes.reduce((sum, node) => {\n        var _node$data;\n        const duration = ((_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.duration) || 0;\n        return sum + duration;\n      }, 0);\n      onTimeUpdate(totalTime);\n    }\n  }, [nodes, onTimeUpdate]);\n  const onConnect = useCallback(params => {\n    setEdges(eds => addEdge(params, eds));\n  }, [setEdges]);\n  const onInit = useCallback(instance => {\n    console.log('ReactFlow initialized');\n    setReactFlowInstance(instance);\n  }, []);\n  const addNode = useCallback((activity, position) => {\n    const newNode = {\n      id: `node-${nextNodeId}`,\n      type: 'default',\n      position: position,\n      data: {\n        label: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: activity.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '10px',\n              marginTop: '4px'\n            },\n            children: [activity.duration, \" min\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this),\n        duration: activity.duration,\n        // Store duration in data for time calculation\n        activityId: activity.id\n      },\n      style: {\n        background: activity.color || '#4CAF50',\n        color: 'white',\n        border: '1px solid #222',\n        width: 180,\n        borderRadius: '5px'\n      }\n    };\n    console.log('Adding node:', newNode);\n    setNodes(nds => [...nds, newNode]);\n    setNextNodeId(nextNodeId + 1);\n  }, [nextNodeId, setNodes]);\n  const [{\n    isOver,\n    canDrop\n  }, drop] = useDrop(() => ({\n    accept: 'activity',\n    drop: (item, monitor) => {\n      console.log('Item dropped:', item);\n      const offset = monitor.getClientOffset();\n      if (offset && reactFlowWrapper.current) {\n        const bounds = reactFlowWrapper.current.getBoundingClientRect();\n\n        // Calculate position relative to the canvas\n        let position = {\n          x: offset.x - bounds.left,\n          y: offset.y - bounds.top\n        };\n\n        // If we have a ReactFlow instance, convert to flow coordinates\n        if (reactFlowInstance) {\n          position = reactFlowInstance.project(position);\n        }\n        console.log('Calculated position:', position);\n        addNode(item, position);\n      }\n      return {\n        dropped: true\n      };\n    },\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  }), [reactFlowInstance, addNode]);\n\n  // Combine refs\n  const setRefs = useCallback(node => {\n    reactFlowWrapper.current = node;\n    drop(node);\n  }, [drop]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-canvas\",\n    style: {\n      flex: 1,\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Orchestration Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: setRefs,\n      style: {\n        flex: 1,\n        border: `2px ${isOver ? 'dashed' : 'solid'} ${canDrop ? '#4CAF50' : '#ccc'}`,\n        backgroundColor: isOver ? '#f0fff4' : '#fff',\n        transition: 'all 0.2s',\n        borderRadius: '8px',\n        position: 'relative'\n      },\n      children: [nodes.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          color: '#9ca3af',\n          fontSize: '14px',\n          pointerEvents: 'none',\n          zIndex: 1\n        },\n        children: \"Drag activities here to build your orchestration graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onInit: onInit,\n        fitView: true,\n        attributionPosition: \"bottom-left\",\n        children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphCanvasInner, \"O7RBxlNSEGvrjE64EIwUb1ou5vo=\", false, function () {\n  return [useNodesState, useEdgesState, useDrop];\n});\n_c = GraphCanvasInner;\nconst GraphCanvas = props => {\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(GraphCanvasInner, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GraphCanvas;\nexport default GraphCanvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphCanvasInner\");\n$RefreshReg$(_c2, \"GraphCanvas\");","map":{"version":3,"names":["React","useCallback","useState","useRef","useEffect","ReactFlow","ReactFlowProvider","addEdge","useNodesState","useEdgesState","Controls","Background","MiniMap","useDrop","jsxDEV","_jsxDEV","GraphCanvasInner","onTimeUpdate","_s","reactFlowWrapper","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","reactFlowInstance","setReactFlowInstance","nextNodeId","setNextNodeId","totalTime","reduce","sum","node","_node$data","duration","data","onConnect","params","eds","onInit","instance","console","log","addNode","activity","position","newNode","id","type","label","children","name","fileName","_jsxFileName","lineNumber","columnNumber","style","fontSize","marginTop","activityId","background","color","border","width","borderRadius","nds","isOver","canDrop","drop","accept","item","monitor","offset","getClientOffset","current","bounds","getBoundingClientRect","x","left","y","top","project","dropped","collect","setRefs","className","flex","display","flexDirection","ref","backgroundColor","transition","length","transform","pointerEvents","zIndex","fitView","attributionPosition","_c","GraphCanvas","props","_c2","$RefreshReg$"],"sources":["/Users/jules/Desktop/orchestration-graph-web/frontend/src/components/GraphCanvas.tsx"],"sourcesContent":["// frontend/src/components/GraphCanvas.tsx\nimport React, { useCallback, useState, useRef, useEffect } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  useNodesState,\n  useEdgesState,\n  Controls,\n  Background,\n  MiniMap,\n  Node,\n  Edge,\n  Connection,\n  ReactFlowInstance,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { useDrop } from 'react-dnd';\nimport { Activity } from '../types';\n\ninterface GraphCanvasProps {\n  onTimeUpdate?: (time: number) => void;\n}\n\n// Define custom node data type\ninterface NodeData {\n  label: React.ReactNode;\n  duration?: number;\n  activityId?: string;\n}\n\nconst GraphCanvasInner: React.FC<GraphCanvasProps> = ({ onTimeUpdate }) => {\n  const reactFlowWrapper = useRef<HTMLDivElement>(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState<Node<NodeData>[]>([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge[]>([]);\n  const [reactFlowInstance, setReactFlowInstance] = useState<ReactFlowInstance | null>(null);\n  const [nextNodeId, setNextNodeId] = useState(1);\n\n  // Calculate total time when nodes change\n  useEffect(() => {\n    if (onTimeUpdate) {\n      const totalTime = nodes.reduce((sum, node) => {\n        const duration = node.data?.duration || 0;\n        return sum + duration;\n      }, 0);\n      onTimeUpdate(totalTime);\n    }\n  }, [nodes, onTimeUpdate]);\n\n  const onConnect = useCallback(\n    (params: Connection) => {\n      setEdges((eds) => addEdge(params, eds));\n    },\n    [setEdges]\n  );\n\n  const onInit = useCallback((instance: ReactFlowInstance) => {\n    console.log('ReactFlow initialized');\n    setReactFlowInstance(instance);\n  }, []);\n\n  const addNode = useCallback((activity: Activity, position: { x: number; y: number }) => {\n    const newNode: Node<NodeData> = {\n      id: `node-${nextNodeId}`,\n      type: 'default',\n      position: position,\n      data: { \n        label: (\n          <div>\n            <strong>{activity.name}</strong>\n            <div style={{ fontSize: '10px', marginTop: '4px' }}>\n              {activity.duration} min\n            </div>\n          </div>\n        ),\n        duration: activity.duration, // Store duration in data for time calculation\n        activityId: activity.id,\n      },\n      style: {\n        background: activity.color || '#4CAF50',\n        color: 'white',\n        border: '1px solid #222',\n        width: 180,\n        borderRadius: '5px',\n      },\n    };\n\n    console.log('Adding node:', newNode);\n    setNodes((nds) => [...nds, newNode]);\n    setNextNodeId(nextNodeId + 1);\n  }, [nextNodeId, setNodes]);\n\n  const [{ isOver, canDrop }, drop] = useDrop(() => ({\n    accept: 'activity',\n    drop: (item: Activity, monitor) => {\n      console.log('Item dropped:', item);\n      const offset = monitor.getClientOffset();\n      \n      if (offset && reactFlowWrapper.current) {\n        const bounds = reactFlowWrapper.current.getBoundingClientRect();\n        \n        // Calculate position relative to the canvas\n        let position = {\n          x: offset.x - bounds.left,\n          y: offset.y - bounds.top,\n        };\n        \n        // If we have a ReactFlow instance, convert to flow coordinates\n        if (reactFlowInstance) {\n          position = reactFlowInstance.project(position);\n        }\n        \n        console.log('Calculated position:', position);\n        addNode(item, position);\n      }\n      \n      return { dropped: true };\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  }), [reactFlowInstance, addNode]);\n\n  // Combine refs\n  const setRefs = useCallback(\n    (node: HTMLDivElement | null) => {\n      reactFlowWrapper.current = node;\n      drop(node);\n    },\n    [drop]\n  );\n\n  return (\n    <div className=\"graph-canvas\" style={{ flex: 1, display: 'flex', flexDirection: 'column' }}>\n      <h2>Orchestration Graph</h2>\n      <div \n        ref={setRefs}\n        style={{ \n          flex: 1,\n          border: `2px ${isOver ? 'dashed' : 'solid'} ${canDrop ? '#4CAF50' : '#ccc'}`,\n          backgroundColor: isOver ? '#f0fff4' : '#fff',\n          transition: 'all 0.2s',\n          borderRadius: '8px',\n          position: 'relative',\n        }}\n      >\n        {nodes.length === 0 && (\n          <div style={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            color: '#9ca3af',\n            fontSize: '14px',\n            pointerEvents: 'none',\n            zIndex: 1,\n          }}>\n            Drag activities here to build your orchestration graph\n          </div>\n        )}\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onInit={onInit}\n          fitView\n          attributionPosition=\"bottom-left\"\n        >\n          <Background />\n          <Controls />\n          <MiniMap />\n        </ReactFlow>\n      </div>\n    </div>\n  );\n};\n\nconst GraphCanvas: React.FC<GraphCanvasProps> = (props) => {\n  return (\n    <ReactFlowProvider>\n      <GraphCanvasInner {...props} />\n    </ReactFlowProvider>\n  );\n};\n\nexport default GraphCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}